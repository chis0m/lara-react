<?php

namespace Tests\Feature\Cart;

use App\Models\Cart;
use App\Models\Product;
use App\Models\User;
use Illuminate\Testing\Fluent\AssertableJson;
use Tests\TestCase;

class CartTest extends TestCase
{
    private $admin;
    private $user;
    private string $baseUrl;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->baseUrl = '/api';
        $this->admin = User::whereRole(User::ADMIN)->first();
        $this->user = User::whereRole(User::USER)->first();
    }

    public function testAdminCanGetAllCart(): void
    {
        $url = $this->baseUrl . "/carts";
        $this->actingAs($this->admin)->get($url)
            ->assertJson(fn(AssertableJson $json) =>
                $json
                    ->where('success', true)
                    ->where('message', trans('general.fetch'))
                    ->has('data.0', fn($json) =>
                        $json
                            ->has('status')
                            ->has('status_string')
                            ->has('count')
                            ->has('user_id')
                            ->has('product_id')
                            ->etc())->etc());
    }

    public function testAdminCanGetAllCartByStatus(): void
    {
        $url = $this->baseUrl . "/carts?status=" . Cart::ADDED;
        $this->actingAs($this->admin)->get($url)
            ->assertJson(fn(AssertableJson $json) =>
            $json
                ->where('success', true)
                ->where('message', trans('general.fetch'))
                ->has('data.0', fn($json) =>
                $json
                    ->where('status', Cart::ADDED)
                    ->has('status_string')
                    ->has('count')
                    ->has('user_id')
                    ->has('product_id')
                    ->etc())->etc());
    }

    public function testOrdinaryUserCantGetAllCart(): void
    {
        $url = $this->baseUrl . "/carts";
        $this->actingAs($this->user)->get($url)
            ->assertJson(fn(AssertableJson $json) =>
            $json
                ->where('success', false)
                ->where('message', 'This action is unauthorized.')->etc());
    }

    public function testUserCanAddToCart(): void
    {
        $user = $this->user;
        $product = Product::whereDoesntHave('carts')->first();
        $products = Product::whereDoesntHave('carts')->get();
        $secondProduct = $products->last();

        $url = $this->baseUrl . "/users/{$user->id}/carts";
        $data = [
            'cart' => [
                ['product_id' => $product->id, 'count' => 2] ,
                ['product_id' => $secondProduct->id, 'count' => 3] ,
            ]
        ];
        $this->actingAs($user)->post($url, $data)
            ->assertJson(fn(AssertableJson $json) =>
            $json
                ->where('success', true)
                ->where('message', trans('general.store'))
                ->has('data.0', fn($json) =>
                $json
                    ->where('status', Cart::ADDED)
                    ->has('status_string')
                    ->has('count')
                    ->has('user_id')
                    ->has('product_id')
                    ->etc())->etc());
    }

    public function testUserCanUpdateCartStatus(): void
    {
        $user = $this->user;
        $cart = Cart::whereBelongsTo($user)->whereStatus(Cart::ADDED)->first();
        $url = $this->baseUrl . "/users/{$user->id}/carts/{$cart->id}";

        $this->actingAs($user)->put($url, ['status' => Cart::CHECKED_OUT, 'count' => 3])
            ->assertJson(fn(AssertableJson $json) =>
            $json
                ->where('success', true)
                ->where('message', trans('general.update'))
                ->has('data', fn($json) =>
                $json
                    ->where('status', Cart::CHECKED_OUT)
                    ->has('count')
                    ->has('user_id')
                    ->has('product_id')
                    ->etc())->etc());

        // checkout was created
        $this->assertDatabaseHas('checkouts', [ 'cart_id' => $cart->id]);
    }

    public function testUserCannotUpdateCartAlreadyCheckedOut(): void
    {
        $user = $this->user;
        $cart = Cart::whereBelongsTo($user)->whereStatus(Cart::CHECKED_OUT)->first();
        $url = $this->baseUrl . "/users/{$user->id}/carts/{$cart->id}";

        $this->actingAs($user)->put($url, ['status' => Cart::CHECKED_OUT, 'count' => 3])
            ->assertJson(fn(AssertableJson $json) =>
            $json
                ->where('success', false)
                ->where('message', trans('general.cart_cant_update', [
                    'value' => Cart::statusToString(Cart::CHECKED_OUT),
                    'secondValue' =>  Cart::statusToString($cart->status)
                ]))->etc());
    }

    public function testUserCannotUpdateCartAlreadyRemoved(): void
    {
        $user = $this->user;
        $cart = Cart::whereBelongsTo($user)->whereStatus(Cart::REMOVED)->first();
        $url = $this->baseUrl . "/users/{$user->id}/carts/{$cart->id}";

        $this->actingAs($user)->put($url, ['status' => Cart::CHECKED_OUT, 'count' => 3])
            ->assertJson(fn(AssertableJson $json) =>
            $json
                ->where('success', false)
                ->where('message', trans('general.cart_cant_update', [
                    'value' => Cart::statusToString(Cart::CHECKED_OUT),
                    'secondValue' =>  Cart::statusToString($cart->status)
                ]))->etc());
    }
}
