<?php

namespace Tests\Feature\Checkout;

use App\Models\Cart;
use App\Models\User;
use Illuminate\Testing\Fluent\AssertableJson;
use Tests\TestCase;

class CheckoutTest extends TestCase
{
    private $admin;
    private $user;
    private string $baseUrl;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->baseUrl = '/api';
        $this->admin = User::whereRole(User::ADMIN)->first();
        $this->user = User::whereRole(User::USER)->first();
    }

    public function testAdminCanGetAllCheckouts(): void
    {
        $url = $this->baseUrl . "/checkouts";
        $this->actingAs($this->admin)->get($url)
            ->assertJson(fn(AssertableJson $json) =>
            $json
                ->where('success', true)
                ->where('message', trans('general.fetch'))
                ->has('data.0', fn($json) =>
                $json
                    ->has('cart_id')
                    ->etc())->etc());
    }

    public function testOrdinaryUserCantGetAllCheckout(): void
    {
        $url = $this->baseUrl . "/checkouts";
        $this->actingAs($this->user)->get($url)
            ->assertJson(fn(AssertableJson $json) =>
            $json
                ->where('success', false)
                ->where('message', 'This action is unauthorized.')->etc());
    }

    public function testUserCanGetHisCheckouts(): void
    {
        $user = $this->user;
        $url = $this->baseUrl . "/users/{$user->id}/checkouts";
        $this->actingAs($this->user)->get($url)
            ->assertJson(fn(AssertableJson $json) =>
            $json
                ->where('success', true)
                ->where('message', trans('general.fetch'))
                ->has('data.0', fn($json) =>
                $json
                    ->has('cart_id')
                    ->etc())->etc());
    }

    public function testUserCanHaveCheckouts(): void
    {
        $user = $this->user;
        $carts = Cart::whereStatus(Cart::ADDED)->take(2)->get()->toArray();
        $data = [
            'cart' => [
                ['id' => $carts[0]['id']],
                ['id' => $carts[1]['id']],
            ]
        ];
        $url = $this->baseUrl . "/users/{$user->id}/checkouts";
        $this->actingAs($user)->post($url, $data)
            ->assertJson(fn(AssertableJson $json) =>
            $json
                ->where('success', true)
                ->where('message', trans('general.store'))
                ->has('data.0', fn($json) =>
                $json
                    ->has('cart_id')
                    ->etc())->etc());
    }
}
