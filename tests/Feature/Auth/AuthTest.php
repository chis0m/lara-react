<?php

namespace Tests\Feature\Auth;

use App\Models\User;
use Illuminate\Http\Response;
use Illuminate\Testing\Fluent\AssertableJson;
use Tests\TestCase;

class AuthTest extends TestCase
{
    protected string $baseUrl;
    private $user;
    private string $password = '(Password!2)'; // used to create in user factory

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->baseUrl = '/api';

        $this->user = User::whereRole(User::USER)->first();
    }

    public function testUserCanRegister(): void
    {
        $url = $this->baseUrl . "/signup";
        $firstName = 'tester';
        $lastName = 'tester';
        $email = 'test3@test.com';
        $details = [
            'first_name' => $firstName,
            'last_name' => $lastName,
            'email' => $email,
            'password' => 'Test04##$'
        ];

        $this->post($url, $details)
            ->assertJson(fn(AssertableJson $json) =>
            $json->where('success', true)
                ->where('message', trans('auth.signup'))
                ->has('data', fn($json) =>
                    $json->hasAll('token', 'user'))->etc());
    }

    public function testUserCanLogin(): void
    {
        $url = $this->baseUrl . "/login";
        $details = [
            'email' => $this->user->email,
            'password' => $this->password
        ];

        $this->post($url, $details)
            ->assertJson(fn(AssertableJson $json) =>
            $json->where('success', true)
                ->where('message', trans('auth.login'))
                ->has('data', fn($json) =>
                $json->hasAll('token', 'user'))->etc());
    }

    /**
     * Test to validate registration form errors.
     *
     * @return void
     */
    public function testToValidateRegistrationInputErrors(): void
    {
        $url = $this->baseUrl . "/signup";
        $response = $this->post($url, [], ['Accept' => 'Application/json']);
        $response->assertStatus(Response::HTTP_UNPROCESSABLE_ENTITY)
            ->assertJson([
            'success' => false,
            'message' => 'The given data is invalid',
            'errors' => [
                'first_name' => [
                    'The first name field is required.'
                ],
                'last_name' => [
                    'The last name field is required.'
                ],
                'email' => [
                    'The email field is required.'
                ],
                'password' => [
                    'The password field is required.'
                ]
            ]
        ]);
    }

    /**
     * Test to login validation.
     *
     * @return void
     */
    public function testLoginValidationErrors(): void
    {
        $url = $this->baseUrl . "/login";
        $response = $this->post($url, ['email' => '', 'password' => ''], ['Accept' => 'Application/json']);
        $response->assertStatus(422)->assertJson([
            'success' => false,
            'message' => 'The given data is invalid',
            'errors' => [
                'email' => [
                    'The email field is required.'
                ],
                'password' => [
                    'The password field is required.'
                ]
            ]
        ]);
    }
}
